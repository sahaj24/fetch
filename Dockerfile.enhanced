# Enhanced production deployment configuration
# This addresses API routing issues in production environments

FROM node:18-bullseye

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    python3 \
    python3-pip \
    curl \
    jq \
    chromium \
    ca-certificates \
    fonts-liberation \
    libappindicator3-1 \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgbm1 \
    libgcc1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    lsb-release \
    wget \
    xdg-utils \
    && ln -sf python3 /usr/bin/python \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set up Puppeteer to use the installed Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies with specific npm configuration for production
RUN npm ci --only=production --silent

# Copy source code
COPY . .

# Set production environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max_old_space_size=4096"

# Create logs directory
RUN mkdir -p logs

# Copy the improved emergency server
COPY emergency-server.js ./

# Build the application with proper error handling
RUN npm run build 2>&1 | tee logs/build.log || echo "Build failed, emergency server will be used"

# Create a robust startup script
RUN cat > start.sh << 'EOF'
#!/bin/bash

# Function to check if Next.js build was successful
check_nextjs_build() {
    if [ -f ".next/standalone/server.js" ] || [ -f ".next/server.js" ] || [ -d ".next" ]; then
        echo "✅ Next.js build detected"
        return 0
    else
        echo "❌ Next.js build not found"
        return 1
    fi
}

# Function to start Next.js
start_nextjs() {
    echo "🚀 Starting Next.js application..."
    if [ -f ".next/standalone/server.js" ]; then
        node .next/standalone/server.js
    else
        npm start
    fi
}

# Function to start emergency server
start_emergency() {
    echo "🆘 Starting emergency server..."
    node emergency-server.js
}

# Function to test API routes
test_api_routes() {
    echo "🧪 Testing API routes..."
    
    # Wait for server to start
    sleep 5
    
    # Test health endpoint
    curl -f http://localhost:${PORT:-8080}/api/health > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "✅ API routes are responding"
        return 0
    else
        echo "❌ API routes are not responding"
        return 1
    fi
}

# Main startup logic
echo "🔄 Starting application..."

if check_nextjs_build; then
    start_nextjs &
    SERVER_PID=$!
    
    # Test if API routes work
    if test_api_routes; then
        echo "✅ Next.js application is working correctly"
        wait $SERVER_PID
    else
        echo "❌ Next.js API routes failed, switching to emergency server"
        kill $SERVER_PID 2>/dev/null
        start_emergency
    fi
else
    echo "⚠️  Next.js build not available, using emergency server"
    start_emergency
fi
EOF

RUN chmod +x start.sh

# Create health check script
RUN cat > healthcheck.sh << 'EOF'
#!/bin/bash
curl -f http://localhost:${PORT:-8080}/api/health || exit 1
EOF

RUN chmod +x healthcheck.sh

# Expose port
EXPOSE 8080

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ./healthcheck.sh

# Start the application
CMD ["./start.sh"]
