import { NextRequest, NextResponse } from "next/server";
import { 
  extractVideoId
} from "../extract/utils";

// Define the types locally since they're not exported from utils
interface AvailableLanguage {
  code: string;
  name: string;
  isDefault: boolean;
  isAutoGenerated: boolean;
}

// Simple in-memory cache for language detection results
interface LanguageCache {
  [videoId: string]: {
    data: any;
    timestamp: number;
  };
}

const languageCache: LanguageCache = {};
const CACHE_DURATION = 10 * 60 * 1000; // 10 minutes

function getCachedResult(videoId: string) {
  const cached = languageCache[videoId];
  if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {
    return cached.data;
  }
  return null;
}

function setCachedResult(videoId: string, data: any) {
  languageCache[videoId] = {
    data,
    timestamp: Date.now()
  };
}

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const url = searchParams.get('url');

    if (!url) {
      return NextResponse.json({ error: 'URL parameter is required' }, { status: 400 });
    }

    return await processLanguageDetection(url);
  } catch (error: any) {
    return handleError(error);
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { url } = body;

    if (!url) {
      return NextResponse.json({ error: 'URL parameter is required' }, { status: 400 });
    }

    return await processLanguageDetection(url);
  } catch (error: any) {
    return handleError(error);
  }
}

async function processLanguageDetection(url: string) {
  // Extract video ID from URL
  const videoId = extractVideoId(url);
  if (!videoId) {
    return NextResponse.json({ error: 'Invalid YouTube URL' }, { status: 400 });
  }

  // Handle playlist and channel URLs
  if (videoId.startsWith('playlist:') || videoId.startsWith('channel:')) {
    // For playlists and channels, return comprehensive common languages as we can't detect from a collection
    const commonLanguages: AvailableLanguage[] = [
      { code: 'auto', name: 'Auto-detected', isDefault: true, isAutoGenerated: true },
      { code: 'en', name: 'English', isDefault: false, isAutoGenerated: true },
      { code: 'es', name: 'Spanish', isDefault: false, isAutoGenerated: true },
      { code: 'fr', name: 'French', isDefault: false, isAutoGenerated: true },
      { code: 'de', name: 'German', isDefault: false, isAutoGenerated: true },
      { code: 'it', name: 'Italian', isDefault: false, isAutoGenerated: true },
      { code: 'pt', name: 'Portuguese', isDefault: false, isAutoGenerated: true },
      { code: 'ru', name: 'Russian', isDefault: false, isAutoGenerated: true },
      { code: 'ja', name: 'Japanese', isDefault: false, isAutoGenerated: true },
      { code: 'ko', name: 'Korean', isDefault: false, isAutoGenerated: true },
      { code: 'zh', name: 'Chinese', isDefault: false, isAutoGenerated: true },
      { code: 'ar', name: 'Arabic', isDefault: false, isAutoGenerated: true },
      { code: 'hi', name: 'Hindi', isDefault: false, isAutoGenerated: true },
      { code: 'nl', name: 'Dutch', isDefault: false, isAutoGenerated: true },
      { code: 'pl', name: 'Polish', isDefault: false, isAutoGenerated: true },
      { code: 'sv', name: 'Swedish', isDefault: false, isAutoGenerated: true },
      { code: 'tr', name: 'Turkish', isDefault: false, isAutoGenerated: true },
      { code: 'th', name: 'Thai', isDefault: false, isAutoGenerated: true },
      { code: 'vi', name: 'Vietnamese', isDefault: false, isAutoGenerated: true },
      { code: 'id', name: 'Indonesian', isDefault: false, isAutoGenerated: true }
    ];

    return NextResponse.json({
      videoId: videoId,
      availableLanguages: commonLanguages,
      defaultLanguage: 'auto',
      isPlaylistOrChannel: true
    });
  }

  // Check cache first for instant results
  const cachedResult = getCachedResult(videoId);
  if (cachedResult) {
    return NextResponse.json(cachedResult);
  }


  // Provide common languages since we can't detect them without the missing functions
  const availableLanguages: AvailableLanguage[] = [
    { code: 'auto', name: 'Auto-detected', isDefault: true, isAutoGenerated: true },
    { code: 'en', name: 'English', isDefault: false, isAutoGenerated: true },
    { code: 'es', name: 'Spanish', isDefault: false, isAutoGenerated: true },
    { code: 'fr', name: 'French', isDefault: false, isAutoGenerated: true },
    { code: 'de', name: 'German', isDefault: false, isAutoGenerated: true },
    { code: 'it', name: 'Italian', isDefault: false, isAutoGenerated: true },
    { code: 'pt', name: 'Portuguese', isDefault: false, isAutoGenerated: true },
    { code: 'ru', name: 'Russian', isDefault: false, isAutoGenerated: true },
    { code: 'ja', name: 'Japanese', isDefault: false, isAutoGenerated: true },
    { code: 'ko', name: 'Korean', isDefault: false, isAutoGenerated: true },
    { code: 'zh', name: 'Chinese', isDefault: false, isAutoGenerated: true },
    { code: 'ar', name: 'Arabic', isDefault: false, isAutoGenerated: true }
  ];
  const defaultLanguage = 'auto';


  const result = {
    videoId: videoId,
    availableLanguages: availableLanguages,
    defaultLanguage: defaultLanguage,
    isPlaylistOrChannel: false
  };

  // Cache the result for next time
  setCachedResult(videoId, result);

  return NextResponse.json(result);
}

function handleError(error: any) {
  console.error(`Error detecting languages: ${error.message}`);
  
  // Return fallback languages if detection fails
  const fallbackLanguages: AvailableLanguage[] = [
    { code: 'auto', name: 'Auto-detected', isDefault: true, isAutoGenerated: true },
    { code: 'en', name: 'English', isDefault: false, isAutoGenerated: true }
  ];

  return NextResponse.json({
    videoId: null,
    availableLanguages: fallbackLanguages,
    defaultLanguage: 'auto',
    isPlaylistOrChannel: false,
    error: error.message
  });
}
